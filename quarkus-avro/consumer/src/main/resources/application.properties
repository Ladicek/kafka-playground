kafka.bootstrap.servers=localhost:9092

mp.messaging.incoming.tweets-consumer.connector=smallrye-kafka
mp.messaging.incoming.tweets-consumer.topic=tweets
mp.messaging.incoming.tweets-consumer.group.id=quarkus-avro
mp.messaging.incoming.tweets-consumer.enable.auto.commit=false

%apicurio1.mp.messaging.incoming.tweets-consumer.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
%apicurio1.mp.messaging.incoming.tweets-consumer.value.deserializer=io.apicurio.registry.utils.serde.AvroKafkaDeserializer
%apicurio1.mp.messaging.incoming.tweets-consumer.apicurio.registry.url=http://localhost:8080/apis/registry/v1
%apicurio1.mp.messaging.incoming.tweets-consumer.apicurio.registry.use-specific-avro-reader=true

%apicurio2.mp.messaging.incoming.tweets-consumer.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
%apicurio2.mp.messaging.incoming.tweets-consumer.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
%apicurio2.mp.messaging.incoming.tweets-consumer.apicurio.registry.url=http://localhost:8080/apis/registry/v2
%apicurio2.mp.messaging.incoming.tweets-consumer.apicurio.registry.use-specific-avro-reader=true

%confluent.mp.messaging.incoming.tweets-consumer.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
%confluent.mp.messaging.incoming.tweets-consumer.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
%confluent.mp.messaging.incoming.tweets-consumer.schema.registry.url=http://localhost:8080/apis/ccompat/v6
%confluent.mp.messaging.incoming.tweets-consumer.specific.avro.reader=true

# must index the dependency, otherwise the Tweet class doesn't end up in an index
# and hence isn't registered for reflection (which happens automatically for @AvroGenerated classes)
quarkus.index-dependency.common-lib.group-id=cz.ladicek.kafka
quarkus.index-dependency.common-lib.artifact-id=quarkus-avro-common

quarkus.log.level=INFO
quarkus.log.category."io.smallrye.reactive.messaging".level=DEBUG
