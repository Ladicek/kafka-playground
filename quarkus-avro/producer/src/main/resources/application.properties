kafka.bootstrap.servers=localhost:9092

mp.messaging.outgoing.tweets-producer.connector=smallrye-kafka
mp.messaging.outgoing.tweets-producer.topic=tweets

%apicurio1.mp.messaging.outgoing.tweets-producer.key.serializer=org.apache.kafka.common.serialization.LongSerializer
%apicurio1.mp.messaging.outgoing.tweets-producer.value.serializer=io.apicurio.registry.utils.serde.AvroKafkaSerializer
%apicurio1.mp.messaging.outgoing.tweets-producer.apicurio.registry.url=http://localhost:8080/apis/registry/v1
%apicurio1.mp.messaging.outgoing.tweets-producer.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy

%apicurio2.mp.messaging.outgoing.tweets-producer.key.serializer=org.apache.kafka.common.serialization.LongSerializer
%apicurio2.mp.messaging.outgoing.tweets-producer.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
%apicurio2.mp.messaging.outgoing.tweets-producer.apicurio.registry.url=http://localhost:8080/apis/registry/v2
%apicurio2.mp.messaging.outgoing.tweets-producer.apicurio.registry.auto-register=true

%confluent.mp.messaging.outgoing.tweets-producer.key.serializer=org.apache.kafka.common.serialization.LongSerializer
%confluent.mp.messaging.outgoing.tweets-producer.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
%confluent.mp.messaging.outgoing.tweets-producer.schema.registry.url=http://localhost:8080/apis/ccompat/v6

quarkus.log.level=INFO
quarkus.log.category."io.smallrye.reactive.messaging".level=DEBUG

# must index the dependency, otherwise the Tweet class doesn't end up in an index
# and hence isn't registered for reflection (which happens automatically for @AvroGenerated classes)
quarkus.index-dependency.common-lib.group-id=cz.ladicek.kafka
quarkus.index-dependency.common-lib.artifact-id=quarkus-avro-common

# Twitter4j requires the US locale for parsing dates
quarkus.native.user-language=en
quarkus.native.user-country=US

# Twitter4j uses JMX in this class
quarkus.native.additional-build-args=--initialize-at-run-time=twitter4j.TwitterAPIMonitor

# Twitter4j uses HTTPS (obviously)
quarkus.ssl.native=true
